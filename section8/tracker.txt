재귀함수, 완전탐색, DFS

01 재귀함수
    재귀함수란?

    자기 자신을 호출하는 함수 
    만약 
    function DFS(L){
        DFS(L-1); 
    } //DFS(3) -> DFS(2) -> DFS(1) -> ...무한반복
    반복문이랑 비슷, 차이점 나중 설명

02 이진수 출력(재귀)
    if(L===0) return;
                else{
                    DFS(L%2);
                    console.log(L);
                }

    난 이렇게 했는데 
    console.log()안에는 출력되는 수(나머지)
    DFS()안에는 다음 텀에 나뉠 대상(?)인 몫이 들어가야지 

03 이진트리 순회
 
 전위: 부 -> 왼 -> 오
                    console.log(v); //두 가닥으로 뻗는 재귀함수 전에 출력!
                    DFS(v*2); //왼
                    DFS(v*2+1); //오
 중위: 왼 -> 부 -> 오
      
                    DFS(v*2); //왼
                    console.log(v);  //중간
                    DFS(v*2+1); //오
 후위: 왼 -> 오 -> 부
DFS(v*2); //왼
                    DFS(v*2); //왼
                    DFS(v*2+1); //오
                    console.log(v);  //마지막
                    


06 바둑이 무게

결국 부분집합 문제ㅕㅇㅆ고 
알고보니 풀었더라구~~<3 그냥 멍청해서 sum+L 을 해버렸지! sum+arr[L] 인데

// 차이점
    function DFS(L,sum){
                if(L===n){
                    if(sum<=c && answer<sum) answer=sum;
                }
                else{
                    DFS(L+1, sum+arr[L]);
                    DFS(L+1, sum);
                }
            }
            DFS(0,0);
    
    여기서 c보다 클 경우를 double if 문으로 제어했는데 
    그냥 밖으로 빼서 가지치기 해버리면 재귀함수쪽으로도 접근하지 않을거라 더 클린한 코드가 된다 
    function DFS(L,sum){
                if(sum>c) return;
                if(L===n){
                    answer=Math.max(answer,sum);
                }
                else{
                    DFS(L+1, sum+arr[L]);
                    DFS(L+1, sum);
                }
            }
            DFS(0,0);

07 최대점수 궇하기 
     못풀었어요~ 
     D(L, sum, time) 으로 돌린당 

     function solution(lim, arr){
            let n=arr.length;
            let answer=0;
            function DFS(L, sum, time){
                if(time>lim) return;
                if(L===n){
                    //console.log(sum);
                    answer=Math.max(answer, sum);
                }else{
                    DFS(L+1,sum+arr[L][0],time+arr[L][1]);
                    DFS(L+1,sum,time);
                }
            }
            DFS(0,0,0);
            return answer;
    
    괜찮아!!! 나쁘지 않음 
    arr[L][0]이 시간인지 arr[L][1]인지 모르겠어 

08 중복순열ㄹ
    다중 for문과 재귀의 차이점
    : 다중 for문은 확장성이 부족함. 인풋 n, m 값이 달라질텐데 그 떄마다 for문의 갯수를 
    늘릴 순 없는거니까

09 동전교환
    